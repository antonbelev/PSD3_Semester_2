Better formatted file can be found here:

https://docs.google.com/document/d/1u4LDNpDM24pM7r9GAZL9lBWTLH-snn0CjxcfaJlZ43k/edit

User story 1
    attributes.Data.java is holding hash maps of courses, students and sessions available. To test if the lecturer is importing successfully courses we need to invoke the method public void importCourseFromMyCampus(MyCampusService myCampusService). 

    Acceptance conditions - if the invocation of this method has populated the courses, students and sessions with the same data as the dummy data provided by the MyCampusService then the method should pass the JUnit test case.

User story 2
    Acceptance conditions - if the invocation of the method addSessionToCourse assosiated with the lecturer instance successfully adds the new session to an existing course then the JUnit test case is passed.

User story 4

    Acceptance conditions - if the invocation of the method specifySessionTimeframe successfully changes the time frame of the session specified - then the JUnit test case pass successfully.

User story 8
    
    Acceptance conditions - if the invocation of the method assignRoomToSlot with parameters  roomName and sessionName, successfully assign room to the already existing session, then the JUnit test case should pass.

User Story 9

	Acceptance condition - if the invocation of the method checkForNoTimeslotClashes with parameters sessionTime and studentName, successfully checking if the session that he student has enrolled for are not clashing, then the JUnit test case should pass.
	  
User story 11

    Acceptance conditions - if the method bookCourseSessionSlots successfully assigns an existing student to an existing session then the new student should appear in the students hashmap inside this existing session. If that is the case the JUnit test case should pass.

User story 12

    Acceptance conditions - CheckCoursesCompousorySessionsTest initializes some data in order to check later if the invocation of the method checkCoursesCompousorySessions will return the expected string of compulsory sessions.

User story 14

    Acceptance conditions - SeeSessionSlotsInformationTest initializes some initial data. Then if the returned result by the seeSessionSlotsInformation method matches the expected string the JUnit test case should pass

User story 23

    Acceptance conditions - CreateSlotForSessionTest initializes a session for the testing purposes. Then the method createSlotForSession should be able to set the start and the end dates for this session. If after the execution of this method the new dates appear for this session the the JUnit test case should pass.

Security/0

	The system shall authenticate users via the MyCampus single sign-on service.
	Acceptance conditions - UserLoginTest 
	
	You can find the JUnit test in AuthenticationTest.
	
	Each user has authenticate method. The test will authenticate admin to and the provided password and username will be checked in the mocked MycampusService class.
	
Security/1

	The system shall distinguish between lecturers, administrators, tutors and student roles.
	
	The test for this non-functional requirement can be found here UserPermissionsTest. we are creating different
	instances of user and we are trying to execute operations that are now allowed for that users.
	
	Exception is expected to be thrown and if that is the case the JUnit test case should pass. 

interoperability/0

	The system shall be implemented as one or more OSGi bundles.

performance/0

	The system shall support at least 100 courses.
	
	This will be tested with creating 100 courses and then checking if the total number of courses existing are actually or over 100 (in case more courses have already been added before this test case).
	The JUnit test is called CourseSupportTest.

performance/1

	The system shall support at least 10 different session types per course.
	
	This will be tested by adding 10 or more sessions to a given course.
	If the size of the courses added is taking into account the new sessions added the 
	JUnit test case should pass. You can see the JUnit class here - SessionTypesTest.

performance/2

	The system shall support at least 1000 different users.
	
	For this non-functional requirement we are creating 1000 users. The JUnit test case can be found here - NumberOfUsersTest.

performance/3

	The system shall support at least 20 different timetable slots per session.
	
	For that non-functional requirement we create new session with 20 dummy timetable slots.
	
	JUnit test can be found here NumberOfTimeTableSlotsPerSessionTest.

performance/4

	The system shall support at least 100 different concurrently active users
	
	For this non-functional requirement we have created 100+ threads which are executing some methods for the current user.
	To check that the system can handle that number of threads we check if the active threads is greater than 100.
	
	The JUnit test case can be found here ConcurrentActiveUsersTest. 

